# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class Depth:
    @property
    def time(self) -> builtins.int: ...
    @property
    def datetime(self) -> builtins.str: ...
    @property
    def symbol(self) -> builtins.str: ...
    @property
    def stream(self) -> builtins.str: ...
    @property
    def bid_level(self) -> builtins.int: ...
    @property
    def ask_level(self) -> builtins.int: ...
    def bid_prc(self, level:builtins.int) -> builtins.float: ...
    def bid_vol(self, level:builtins.int) -> builtins.float: ...
    def ask_prc(self, level:builtins.int) -> builtins.float: ...
    def ask_vol(self, level:builtins.int) -> builtins.float: ...

class Event:
    @property
    def event_type(self) -> EventType: ...
    @property
    def data(self) -> typing.Any: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Kline:
    @property
    def time(self) -> builtins.int: ...
    @property
    def datetime(self) -> builtins.str: ...
    @property
    def symbol(self) -> builtins.str: ...
    @property
    def stream(self) -> builtins.str: ...
    @property
    def open(self) -> builtins.float: ...
    @property
    def high(self) -> builtins.float: ...
    @property
    def low(self) -> builtins.float: ...
    @property
    def close(self) -> builtins.float: ...
    @property
    def volume(self) -> builtins.float: ...
    @property
    def amount(self) -> builtins.float: ...
    @property
    def start_time(self) -> builtins.int: ...
    @property
    def start_datetime(self) -> builtins.str: ...
    @property
    def interval(self) -> builtins.str: ...
    @property
    def first_trade_id(self) -> builtins.int: ...
    @property
    def last_trade_id(self) -> builtins.int: ...
    @property
    def trade_count(self) -> builtins.int: ...
    @property
    def is_closed(self) -> builtins.bool: ...
    @property
    def buy_volume(self) -> builtins.float: ...
    @property
    def buy_amount(self) -> builtins.float: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...

class Order:
    @property
    def time(self) -> builtins.int: ...
    @property
    def datetime(self) -> builtins.str: ...
    @property
    def symbol(self) -> builtins.str: ...
    @property
    def side(self) -> Side: ...
    @property
    def state(self) -> State: ...
    @property
    def order_type(self) -> OrderType: ...
    @property
    def tif(self) -> Tif: ...
    @property
    def quantity(self) -> builtins.float: ...
    @property
    def price(self) -> builtins.float: ...
    @property
    def id(self) -> builtins.int: ...
    @property
    def trade_time(self) -> builtins.int: ...
    @property
    def trade_dt(self) -> builtins.str: ...
    @property
    def trade_price(self) -> builtins.float: ...
    @property
    def trade_quantity(self) -> builtins.float: ...
    @property
    def acc(self) -> builtins.float: ...
    @property
    def making(self) -> typing.Optional[builtins.bool]: ...
    @property
    def is_active(self) -> builtins.bool: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...

class Position:
    ...

class PremiumIndex:
    @property
    def time(self) -> builtins.int: ...
    @property
    def datetime(self) -> builtins.str: ...
    @property
    def symbol(self) -> builtins.str: ...
    @property
    def mark_price(self) -> builtins.float: ...
    @property
    def index_price(self) -> builtins.float: ...
    @property
    def estimated_settle_price(self) -> builtins.float: ...
    @property
    def last_funding_rate(self) -> builtins.float: ...
    @property
    def next_funding_time(self) -> builtins.int: ...
    @property
    def next_funding_dt(self) -> builtins.str: ...
    @property
    def interest_rate(self) -> builtins.float: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Rest:
    def __new__(cls, base_uri:builtins.str, apikey:builtins.str, pem:builtins.str, recvwindow:builtins.int) -> Rest: ...
    def sign(self, data:builtins.str) -> builtins.str: ...
    def get(self, path:builtins.str, params:dict, authenticate:builtins.bool) -> builtins.str: ...
    def post(self, path:builtins.str, params:dict, authenticate:builtins.bool) -> builtins.str: ...
    def delete(self, path:builtins.str, params:dict, authenticate:builtins.bool) -> builtins.str: ...
    def put(self, path:builtins.str, params:dict, authenticate:builtins.bool) -> builtins.str: ...
    def patch(self, path:builtins.str, params:dict, authenticate:builtins.bool) -> builtins.str: ...
    def get_premium_index(self) -> builtins.list[PremiumIndex]: ...

class Session:
    @property
    def id(self) -> builtins.int: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def is_login(self) -> builtins.bool: ...
    @property
    def trading(self) -> builtins.bool: ...
    def __new__(cls, addr:builtins.str, session_id:builtins.int, name:builtins.str, trading:builtins.bool) -> Session: ...
    def connect(self) -> None: ...
    def subscribe(self, symbol:builtins.str, stream:builtins.str) -> Subscription: ...
    def add_order(self, symbol:builtins.str, price:builtins.float, quantity:builtins.float, side:Side, order_type:OrderType, tif:Tif) -> typing.Optional[Order]: ...
    def cancel(self, symbol:builtins.str, order_id:builtins.int) -> None: ...
    def process(self) -> typing.Optional[typing.Any]: ...

class Subscription:
    @property
    def symbol(self) -> builtins.str: ...
    @property
    def delivery(self) -> builtins.str: ...
    @property
    def onboard(self) -> builtins.str: ...
    @property
    def max_prc(self) -> builtins.float: ...
    @property
    def min_prc(self) -> builtins.float: ...
    @property
    def tick_size(self) -> builtins.float: ...
    @property
    def lot(self) -> builtins.float: ...
    @property
    def min_notional(self) -> builtins.float: ...
    @property
    def net(self) -> builtins.float: ...
    def order_support(self, order_type:OrderType) -> builtins.bool: ...
    def floor_to_lot_size(self, vol:builtins.float) -> builtins.float: ...
    def round_price(self, price:builtins.float) -> builtins.float: ...
    def tick_up(self, price:builtins.float, n:builtins.int) -> builtins.float: ...
    def tick_dn(self, price:builtins.float, n:builtins.int) -> builtins.float: ...
    def add_phase(self, hour:builtins.int, minute:builtins.int, second:builtins.int, phase:Phase) -> None: ...
    def determine(self, mills:builtins.int) -> Phase: ...

class TradingPhase:
    def __new__(cls) -> TradingPhase: ...
    def keys(self) -> builtins.list[builtins.int]: ...
    def vals(self) -> builtins.list[Phase]: ...
    def add_phase(self, hour:builtins.int, minute:builtins.int, second:builtins.int, phase:Phase) -> None: ...
    def to_second(self, mills:builtins.int) -> builtins.int: ...
    def determine(self, mills:builtins.int) -> Phase: ...
    def to_datetime(self, mills:builtins.int) -> builtins.str: ...

class EventType(Enum):
    Login = ...
    Depth = ...
    Kline = ...
    Order = ...
    Position = ...

class OrderType(Enum):
    LIMIT = ...
    r"""
    Limit order
    """
    LIMIT_MAKER = ...
    r"""
    Limit maker order
    """
    MARKET = ...
    r"""
    Market order
    """
    STOP = ...
    r"""
    Stop order
    """
    STOP_MARKET = ...
    r"""
    Stop market order
    """
    STOP_LOSS = ...
    r"""
    Stop loss order
    """
    STOP_LOSS_LIMIT = ...
    r"""
    Stop loss limit order
    """
    TAKE_PROFIT = ...
    r"""
    Take profit order
    """
    TAKE_PROFIT_LIMIT = ...
    r"""
    Take profit limit order
    """
    TAKE_PROFIT_MARKET = ...
    TRAILING_STOP_MARKET = ...
    r"""
    Trailing stop market order
    """

class Phase(Enum):
    AUCTION = ...
    PRE_OPEN = ...
    OPEN = ...
    PRE_CLOSE = ...
    CLOSE = ...
    UNDEF = ...

class Side(Enum):
    r"""
    The side of an order
    """
    BUY = ...
    r"""
    Buy side
    """
    SELL = ...
    r"""
    Sell side
    """

class State(Enum):
    NEW = ...
    PARTIALLY_FILLED = ...
    FILLED = ...
    CANCELED = ...
    REJECTED = ...
    EXPIRED = ...
    EXPIRED_IN_MATCH = ...
    UNDEF = ...

class Tif(Enum):
    GTC = ...
    r"""
    Good till cancel
    """
    IOC = ...
    r"""
    Immediate or cancel
    """
    FOK = ...
    r"""
    Fill or kill
    """
    GTX = ...
    r"""
    Good till date
    """
    GTD = ...
    r"""
    Good till date
    """
    UNDEF = ...
    r"""
    Undefined
    """

